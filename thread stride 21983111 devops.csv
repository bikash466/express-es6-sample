Id,Title,Category,Diagram,Interaction,Priority,State,Changed By,Description,Justification,Last Modified,Possible Mitigation(s),SDL Phase
0,An adversary can perform action on behalf of other user due to lack of controls against cross domain requests,Denial of Service,Diagram 1,HTTP Request,High,Not Started,,Failure to restrict requests originating from third party domains may result in unauthorized actions or access of data,,Generated,"Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Ensure that only trusted origins are allowed if CORS is enabled on ASP.NET Web Applications. Refer: <a href=""https://aka.ms/tmtconfigmgmt#cors-aspnet"">https://aka.ms/tmtconfigmgmt#cors-aspnet</a>  Mitigate against Cross-Site Request Forgery (CSRF) attacks on ASP.NET web pages. Refer: <a href=""https://aka.ms/tmtsmgmt#csrf-asp"">https://aka.ms/tmtsmgmt#csrf-asp</a>",Implementation
1,An adversary may bypass critical steps or perform actions on behalf of other users (victims) due to improper validation logic,Elevation of Privileges,Diagram 1,HTTP Request,High,Not Started,,Failure to restrict the privileges and access rights to the application to individuals who require the privileges or access rights may result into unauthorized use of data due to inappropriate rights settings and validation.,,Generated,"Ensure that administrative interfaces are appropriately locked down. Refer: <a href=""https://aka.ms/tmtauthn#admin-interface-lockdown"">https://aka.ms/tmtauthn#admin-interface-lockdown</a>  Enforce sequential step order when processing business logic flows. Refer: <a href=""https://aka.ms/tmtauthz#sequential-logic"">https://aka.ms/tmtauthz#sequential-logic</a>  Ensure that proper authorization is in place and principle of least privileges is followed. Refer: <a href=""https://aka.ms/tmtauthz#principle-least-privilege"">https://aka.ms/tmtauthz#principle-least-privilege</a>  Business logic and resource access authorization decisions should not be based on incoming request parameters. Refer: <a href=""https://aka.ms/tmtauthz#logic-request-parameters"">https://aka.ms/tmtauthz#logic-request-parameters</a>  Ensure that content and resources are not enumerable or accessible via forceful browsing. Refer: <a href=""https://aka.ms/tmtauthz#enumerable-browsing"">https://aka.ms/tmtauthz#enumerable-browsing</a>",Implementation
2,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,An adversary can reverse weakly encrypted or hashed content,,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a> Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Use only approved symmetric block ciphers and key lengths. Refer: <a href=""https://aka.ms/tmtcrypto#cipher-length"">https://aka.ms/tmtcrypto#cipher-length</a>  Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#vector-ciphers"">https://aka.ms/tmtcrypto#vector-ciphers</a>  Use approved asymmetric algorithms, key lengths, and padding. Refer: <a href=""https://aka.ms/tmtcrypto#padding"">https://aka.ms/tmtcrypto#padding</a>  Use approved random number generators. Refer: <a href=""https://aka.ms/tmtcrypto#numgen"">https://aka.ms/tmtcrypto#numgen</a>  Do not use symmetric stream ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#stream-ciphers"">https://aka.ms/tmtcrypto#stream-ciphers</a>  Use approved MAC/HMAC/keyed hash algorithms. Refer: <a href=""https://aka.ms/tmtcrypto#mac-hash"">https://aka.ms/tmtcrypto#mac-hash</a>  Use only approved cryptographic hash functions. Refer: <a href=""https://aka.ms/tmtcrypto#hash-functions"">https://aka.ms/tmtcrypto#hash-functions</a>  Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
3,An adversary may gain access to sensitive data from log files,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,An adversary may gain access to sensitive data from log files,,Generated,"Ensure that the application does not log sensitive user data. Refer: <a href=""https://aka.ms/tmtauditlog#log-sensitive-data"">https://aka.ms/tmtauditlog#log-sensitive-data</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>",Implementation
4,An adversary may gain access to unmasked sensitive data such as credit card numbers,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,An adversary may gain access to unmasked sensitive data such as credit card numbers,,Generated,"Ensure that sensitive data displayed on the user screen is masked. Refer: <a href=""https://aka.ms/tmtdata#data-mask"">https://aka.ms/tmtdata#data-mask</a>",Implementation
5,An adversary can gain access to certain pages or the site as a whole.,Information Disclosure,Diagram 1,HTTP Request,Medium,Not Started,,Robots.txt is often found in your site's root directory and exists to regulate the bots that crawl your site. This is where you can grant or deny permission to all or some specific search engine robots to access certain pages or your site as a whole. The standard for this file was developed in 1994 and is known as the Robots Exclusion Standard or Robots Exclusion Protocol. Detailed info about the robots.txt protocol can be found at robotstxt.org.,,Generated,"Ensure that administrative interfaces are appropriately locked down. Refer: <a href=""https://aka.ms/tmtauthn#admin-interface-lockdown"">https://aka.ms/tmtauthn#admin-interface-lockdown</a>",Implementation
6,An adversary can gain access to sensitive data by sniffing traffic to Web Application,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,"An adversary may conduct man in the middle attack and downgrade TLS connection to clear text protocol, or forcing browser communication to pass through a proxy server that he controls. This may happen because the application may use mixed content or HTTP Strict Transport Security policy is not ensured.",,Generated,"Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmtsmgmt#https-secure-cookies"">https://aka.ms/tmtsmgmt#https-secure-cookies</a>  Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmtcommsec#http-hsts"">https://aka.ms/tmtcommsec#http-hsts</a>",Implementation
7,An adversary can gain access to sensitive information through error messages,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ",,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a>  Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Exceptions should fail safely. Refer: <a href=""https://aka.ms/tmtxmgmt#fail"">https://aka.ms/tmtxmgmt#fail</a>  ASP.NET applications must disable tracing and debugging prior to deployment. Refer: <a href=""https://aka.ms/tmtconfigmgmt#trace-deploy"">https://aka.ms/tmtconfigmgmt#trace-deploy</a>  Implement controls to prevent username enumeration. Refer: <a href=""https://aka.ms/tmtauthn#controls-username-enum"">https://aka.ms/tmtauthn#controls-username-enum</a>",Implementation
8,An adversary may gain access to sensitive data from uncleared browser cache,Information Disclosure,Diagram 1,HTTP Request,High,Not Started,,An adversary may gain access to sensitive data from uncleared browser cache,,Generated,"Ensure that sensitive content is not cached on the browser. Refer: <a href=""https://aka.ms/tmtdata#cache-browser"">https://aka.ms/tmtdata#cache-browser</a>",Implementation
9,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Diagram 1,HTTP Request,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system",,Generated,"Ensure that auditing and logging is enforced on the application. Refer: <a href=""https://aka.ms/tmtauditlog#auditing"">https://aka.ms/tmtauditlog#auditing</a>  Ensure that log rotation and separation are in place. Refer: <a href=""https://aka.ms/tmtauditlog#log-rotation"">https://aka.ms/tmtauditlog#log-rotation</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>  Ensure that User Management Events are Logged. Refer: <a href=""https://aka.ms/tmtauditlog#user-management"">https://aka.ms/tmtauditlog#user-management</a>",Implementation
10,An adversary can get access to a user's session due to improper logout and timeout,Spoofing,Diagram 1,HTTP Request,High,Not Started,,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user.,,Generated,"Set up session for inactivity lifetime. Refer: <a href=""https://aka.ms/tmtsmgmt#inactivity-lifetime"">https://aka.ms/tmtsmgmt#inactivity-lifetime</a>  Implement proper logout from the application. Refer: <a href=""https://aka.ms/tmtsmgmt#proper-app-logout"">https://aka.ms/tmtsmgmt#proper-app-logout</a>",Implementation
11,An adversary can get access to a user's session due to insecure coding practices,Spoofing,Diagram 1,HTTP Request,High,Not Started,,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user.,,Generated,"Enable ValidateRequest attribute on ASP.NET Pages. Refer: <a href=""https://aka.ms/tmtconfigmgmt#validate-aspnet"">https://aka.ms/tmtconfigmgmt#validate-aspnet</a>  Encode untrusted web output prior to rendering. Refer: <a href=""https://aka.ms/tmtinputval#rendering"">https://aka.ms/tmtinputval#rendering</a>  Avoid using Html.Raw in Razor views. Refer: <a href=""https://aka.ms/tmtinputval#html-razor"">https://aka.ms/tmtinputval#html-razor</a>  Sanitization should be applied on form fields that accept all characters e.g, rich text editor . Refer: <a href=""https://aka.ms/tmtinputval#richtext"">https://aka.ms/tmtinputval#richtext</a>  Do not assign DOM elements to sinks that do not have inbuilt encoding . Refer: <a href=""https://aka.ms/tmtinputval#inbuilt-encode"">https://aka.ms/tmtinputval#inbuilt-encode</a>",Implementation
12,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Diagram 1,HTTP Request,High,Not Started,,Ensure that TLS certificate parameters are configured with correct values,,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
13,An adversary can steal sensitive data like user credentials,Spoofing,Diagram 1,HTTP Request,High,Not Started,,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",,Generated,"Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: <a href=""https://aka.ms/tmtdata#autocomplete-input"">https://aka.ms/tmtdata#autocomplete-input</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>  Enable step up or adaptive authentication. Refer: <a href=""https://aka.ms/tmtauthn#step-up-adaptive-authn"">https://aka.ms/tmtauthn#step-up-adaptive-authn</a>  Implement forgot password functionalities securely. Refer: <a href=""https://aka.ms/tmtauthn#forgot-pword-fxn"">https://aka.ms/tmtauthn#forgot-pword-fxn</a>  Ensure that password and account policy are implemented. Refer: <a href=""https://aka.ms/tmtauthn#pword-account-policy"">https://aka.ms/tmtauthn#pword-account-policy</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>",Implementation
14,Attackers can steal user session cookies due to insecure cookie attributes,Spoofing,Diagram 1,HTTP Request,High,Not Started,,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user. ,,Generated,"Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmtsmgmt#https-secure-cookies"">https://aka.ms/tmtsmgmt#https-secure-cookies</a>  All http based application should specify http only for cookie definition. Refer: <a href=""https://aka.ms/tmtsmgmt#cookie-definition"">https://aka.ms/tmtsmgmt#cookie-definition</a>",Implementation
15,An adversary can create a fake website and launch phishing attacks,Spoofing,Diagram 1,HTTP Request,High,Not Started,,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication",,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>  Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>",Implementation
16,An adversary may spoof Browser and gain access to Web Application,Spoofing,Diagram 1,HTTP Request,High,Not Started,,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application",,Generated,"Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",Design
17,An adversary can deface the target web application by injecting malicious code or uploading dangerous files,Tampering,Diagram 1,HTTP Request,High,Not Started,,Website defacement is an attack on a website where the attacker changes the visual appearance of the site or a webpage. ,,Generated,"Implement Content Security Policy (CSP), and disable inline javascript. Refer: <a href=""https://aka.ms/tmtconfigmgmt#csp-js"">https://aka.ms/tmtconfigmgmt#csp-js</a>  Enable browser's XSS filter. Refer: <a href=""https://aka.ms/tmtconfigmgmt#xss-filter"">https://aka.ms/tmtconfigmgmt#xss-filter</a>  Access third party javascripts from trusted sources only. Refer: <a href=""https://aka.ms/tmtconfigmgmt#js-trusted"">https://aka.ms/tmtconfigmgmt#js-trusted</a>  Enable ValidateRequest attribute on ASP.NET Pages. Refer: <a href=""https://aka.ms/tmtconfigmgmt#validate-aspnet"">https://aka.ms/tmtconfigmgmt#validate-aspnet</a>  Ensure that each page that could contain user controllable content opts out of automatic MIME sniffing . Refer: <a href=""https://aka.ms/tmtinputval#out-sniffing"">https://aka.ms/tmtinputval#out-sniffing</a>  Use locally-hosted latest versions of JavaScript libraries . Refer: <a href=""https://aka.ms/tmtconfigmgmt#local-js"">https://aka.ms/tmtconfigmgmt#local-js</a>  Ensure appropriate controls are in place when accepting files from users. Refer: <a href=""https://aka.ms/tmtinputval#controls-users"">https://aka.ms/tmtinputval#controls-users</a>  Disable automatic MIME sniffing. Refer: <a href=""https://aka.ms/tmtconfigmgmt#mime-sniff"">https://aka.ms/tmtconfigmgmt#mime-sniff</a>  Encode untrusted web output prior to rendering. Refer: <a href=""https://aka.ms/tmtinputval#rendering"">https://aka.ms/tmtinputval#rendering</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Ensure that the system has inbuilt defences against misuse. Refer: <a href=""https://aka.ms/tmtauditlog#inbuilt-defenses"">https://aka.ms/tmtauditlog#inbuilt-defenses</a>  Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmtcommsec#http-hsts"">https://aka.ms/tmtcommsec#http-hsts</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>  Avoid using Html.Raw in Razor views. Refer: <a href=""https://aka.ms/tmtinputval#html-razor"">https://aka.ms/tmtinputval#html-razor</a>  Sanitization should be applied on form fields that accept all characters e.g, rich text editor . Refer: <a href=""https://aka.ms/tmtinputval#richtext"">https://aka.ms/tmtinputval#richtext</a>  Do not assign DOM elements to sinks that do not have inbuilt encoding . Refer: <a href=""https://aka.ms/tmtinputval#inbuilt-encode"">https://aka.ms/tmtinputval#inbuilt-encode</a>",Implementation
18,An attacker steals messages off the network and replays them in order to steal a user's session,Tampering,Diagram 1,HTTP Request,High,Not Started,,An attacker steals messages off the network and replays them in order to steal a user's session,,Generated,,Implementation
19,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Diagram 1,HTTP Request,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",Implementation
20,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Diagram 1,HTTP Request,High,Not Started,,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",,Generated,"Encrypt sections of Web App's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtdata#encrypt-data"">https://aka.ms/tmtdata#encrypt-data</a>",Implementation
21,An adversary can gain unauthorized access to database due to lack of network access protection,Elevation of Privileges,Diagram 1,SQL Request,High,Not Started,,"If there is no restriction at network or host firewall level, to access the database then anyone can attempt to connect to the database from an unauthorized location",,Generated,"Configure a Windows Firewall for Database Engine Access. Refer: <a href=""https://aka.ms/tmtconfigmgmt#firewall-db"">https://aka.ms/tmtconfigmgmt#firewall-db</a>",Implementation
22,An adversary can gain unauthorized access to database due to loose authorization rules,Elevation of Privileges,Diagram 1,SQL Request,High,Not Started,,Database access should be configured with roles and privilege based on least privilege and need to know principle. ,,Generated,"Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Implement Row Level Security RLS to prevent tenants from accessing each others data. Refer: <a href=""https://aka.ms/tmtauthz#rls-tenants"">https://aka.ms/tmtauthz#rls-tenants</a>  Sysadmin role should only have valid necessary users . Refer: <a href=""https://aka.ms/tmtauthz#sysadmin-users"">https://aka.ms/tmtauthz#sysadmin-users</a>",Implementation
23,An adversary can gain access to sensitive data by sniffing traffic to database,Information Disclosure,Diagram 1,SQL Request,High,Not Started,,"An adversary can eaves drop on communication between application server and Database server, due to clear text communication protocol usage.",,Generated,"Ensure SQL server connection encryption and certificate validation. Refer: <a href=""https://aka.ms/tmtcommsec#sqlserver-validation"">https://aka.ms/tmtcommsec#sqlserver-validation</a>  Force Encrypted communication to SQL server. Refer: <a href=""https://aka.ms/tmtcommsec#encrypted-sqlserver"">https://aka.ms/tmtcommsec#encrypted-sqlserver</a>",Implementation
24,An adversary can gain access to sensitive PII or HBI data in database,Information Disclosure,Diagram 1,SQL Request,High,Not Started,,"Additional controls like Transparent Data Encryption, Column Level Encryption, EKM etc. provide additional protection mechanism to high value PII or HBI data. ",,Generated,"Use strong encryption algorithms to encrypt data in the database. Refer: <a href=""https://aka.ms/tmtcrypto#strong-db"">https://aka.ms/tmtcrypto#strong-db</a>  Ensure that sensitive data in database columns is encrypted. Refer: <a href=""https://aka.ms/tmtdata#db-encrypted"">https://aka.ms/tmtdata#db-encrypted</a>  Ensure that database-level encryption (TDE) is enabled. Refer: <a href=""https://aka.ms/tmtdata#tde-enabled"">https://aka.ms/tmtdata#tde-enabled</a>  Ensure that database backups are encrypted. Refer: <a href=""https://aka.ms/tmtdata#backup"">https://aka.ms/tmtdata#backup</a>  Use SQL server EKM to protect encryption keys. Refer: <a href=""https://aka.ms/tmtcrypto#ekm-keys"">https://aka.ms/tmtcrypto#ekm-keys</a>  Use AlwaysEncrypted feature if encryption keys should not be revealed to Database engine. Refer: <a href=""https://aka.ms/tmtcrypto#keys-engine"">https://aka.ms/tmtcrypto#keys-engine</a>",Implementation
25,An adversary can gain access to sensitive data by performing SQL injection,Information Disclosure,Diagram 1,SQL Request,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>  Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>  Do not use dynamic queries in stored procedures. Refer: <a href=""https://aka.ms/tmtinputval#stored-proc"">https://aka.ms/tmtinputval#stored-proc</a>",Implementation
26,An adversary can deny actions on database due to lack of auditing,Repudiation,Diagram 1,SQL Request,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system.",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>",Implementation
27,An adversary can tamper critical database securables and deny the action,Tampering,Diagram 1,SQL Request,High,Not Started,,An adversary can tamper critical database securables and deny the action,,Generated,"Add digital signature to critical database securables. Refer: <a href=""https://aka.ms/tmtcrypto#securables-db"">https://aka.ms/tmtcrypto#securables-db</a>",Design
28,An adversary may leverage the lack of monitoring systems and trigger anomalous traffic to database,Tampering,Diagram 1,SQL Request,High,Not Started,,An adversary may leverage the lack of intrusion detection and prevention  of anomalous database activities and  trigger anomalous traffic to database,,Generated,"Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>",Design
29,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Diagram 1,SQL Response,High,Not Started,,An adversary can reverse weakly encrypted or hashed content,,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a> Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Use only approved symmetric block ciphers and key lengths. Refer: <a href=""https://aka.ms/tmtcrypto#cipher-length"">https://aka.ms/tmtcrypto#cipher-length</a>  Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#vector-ciphers"">https://aka.ms/tmtcrypto#vector-ciphers</a>  Use approved asymmetric algorithms, key lengths, and padding. Refer: <a href=""https://aka.ms/tmtcrypto#padding"">https://aka.ms/tmtcrypto#padding</a>  Use approved random number generators. Refer: <a href=""https://aka.ms/tmtcrypto#numgen"">https://aka.ms/tmtcrypto#numgen</a>  Do not use symmetric stream ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#stream-ciphers"">https://aka.ms/tmtcrypto#stream-ciphers</a>  Use approved MAC/HMAC/keyed hash algorithms. Refer: <a href=""https://aka.ms/tmtcrypto#mac-hash"">https://aka.ms/tmtcrypto#mac-hash</a>  Use only approved cryptographic hash functions. Refer: <a href=""https://aka.ms/tmtcrypto#hash-functions"">https://aka.ms/tmtcrypto#hash-functions</a>  Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
30,An adversary may gain access to sensitive data from log files,Information Disclosure,Diagram 1,SQL Response,High,Not Started,,An adversary may gain access to sensitive data from log files,,Generated,"Ensure that the application does not log sensitive user data. Refer: <a href=""https://aka.ms/tmtauditlog#log-sensitive-data"">https://aka.ms/tmtauditlog#log-sensitive-data</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>",Implementation
31,An adversary can gain access to sensitive information through error messages,Information Disclosure,Diagram 1,SQL Response,High,Not Started,,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ",,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a>  Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Exceptions should fail safely. Refer: <a href=""https://aka.ms/tmtxmgmt#fail"">https://aka.ms/tmtxmgmt#fail</a>  ASP.NET applications must disable tracing and debugging prior to deployment. Refer: <a href=""https://aka.ms/tmtconfigmgmt#trace-deploy"">https://aka.ms/tmtconfigmgmt#trace-deploy</a>  Implement controls to prevent username enumeration. Refer: <a href=""https://aka.ms/tmtauthn#controls-username-enum"">https://aka.ms/tmtauthn#controls-username-enum</a>",Implementation
32,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Diagram 1,SQL Response,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system",,Generated,"Ensure that auditing and logging is enforced on the application. Refer: <a href=""https://aka.ms/tmtauditlog#auditing"">https://aka.ms/tmtauditlog#auditing</a>  Ensure that log rotation and separation are in place. Refer: <a href=""https://aka.ms/tmtauditlog#log-rotation"">https://aka.ms/tmtauditlog#log-rotation</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>  Ensure that User Management Events are Logged. Refer: <a href=""https://aka.ms/tmtauditlog#user-management"">https://aka.ms/tmtauditlog#user-management</a>",Implementation
33,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Diagram 1,SQL Response,High,Not Started,,Ensure that TLS certificate parameters are configured with correct values,,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
34,An adversary can steal sensitive data like user credentials,Spoofing,Diagram 1,SQL Response,High,Not Started,,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",,Generated,"Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: <a href=""https://aka.ms/tmtdata#autocomplete-input"">https://aka.ms/tmtdata#autocomplete-input</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>  Enable step up or adaptive authentication. Refer: <a href=""https://aka.ms/tmtauthn#step-up-adaptive-authn"">https://aka.ms/tmtauthn#step-up-adaptive-authn</a>  Implement forgot password functionalities securely. Refer: <a href=""https://aka.ms/tmtauthn#forgot-pword-fxn"">https://aka.ms/tmtauthn#forgot-pword-fxn</a>  Ensure that password and account policy are implemented. Refer: <a href=""https://aka.ms/tmtauthn#pword-account-policy"">https://aka.ms/tmtauthn#pword-account-policy</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>",Implementation
35,An adversary can create a fake website and launch phishing attacks,Spoofing,Diagram 1,SQL Response,High,Not Started,,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication",,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>  Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>",Implementation
36,An adversary may spoof Database and gain access to Web Application,Spoofing,Diagram 1,SQL Response,High,Not Started,,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application",,Generated,"Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",Design
37,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Diagram 1,SQL Response,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",Implementation
38,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Diagram 1,SQL Response,High,Not Started,,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",,Generated,"Encrypt sections of Web App's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtdata#encrypt-data"">https://aka.ms/tmtdata#encrypt-data</a>",Implementation
